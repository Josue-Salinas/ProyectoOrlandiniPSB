/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectopsb;

import Clases.DatosCompartidos;
import Clases.PuntoCritico;
import Clases.Usuario;
import java.awt.Color;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Josue
 */
public class VentanaMostrar extends javax.swing.JFrame {

    /**
     * Creates new form VentanaMostrar
     */
    Usuario usuarioActual;
    public VentanaMostrar(Usuario usuarioActual) {
        initComponents();
        mostrarUltimosTres();
        this.setLocationRelativeTo(null);
        txtAreaUltimosTres.setEditable(false);
        TextPanelListaPuntos.setEditable(false);
        txtResumen.setEditable(false);
        this.usuarioActual = usuarioActual;
        lblUsuarioActual.setText("Usuario: "+usuarioActual.getNombre()+" || Correco: "+usuarioActual.getCorreo());
    }
    
    public void mostrarUltimosTres(){
        String tresUltimos = "Mostrando los Ultimos 3 Puntos Agregados:\n=====================================\n";
        int total = DatosCompartidos.puntosCriticos.size();
        
        for(int i = total -1; i >= 0 && i >= total -3; i--){
            PuntoCritico punto = DatosCompartidos.puntosCriticos.get(i);
            tresUltimos += "- Direccion o Url : " + punto.getDireccion() + "\n";
            tresUltimos += "- Distrito : " + punto.getDistrito() + "\n";
            tresUltimos += "- Prioridad : " + punto.getPrioridad() + "\n";
            tresUltimos += "- Observacion: "+ punto.getObservacion() + "\n";
            tresUltimos += "- Fecha de Registro: "+ punto.getFechaHora() + "\n";
            tresUltimos += "===================================== \n";
        }
        txtAreaUltimosTres.setText(tresUltimos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnVolverAVentanaPrincipal = new javax.swing.JLabel();
        btnMostrarPuntos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaUltimosTres = new javax.swing.JTextArea();
        txtResumen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblUsuarioActual = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextPanelListaPuntos = new javax.swing.JTextPane();
        btnExportartxt = new javax.swing.JButton();
        btnOrdenarAlfabeticamente = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        btnVolverAVentanaPrincipal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVolverAVentanaPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverAVentanaPrincipalMouseClicked(evt);
            }
        });
        jPanel1.add(btnVolverAVentanaPrincipal);
        btnVolverAVentanaPrincipal.setBounds(130, 700, 150, 40);

        btnMostrarPuntos.setBackground(new java.awt.Color(102, 204, 0));
        btnMostrarPuntos.setForeground(new java.awt.Color(255, 255, 255));
        btnMostrarPuntos.setText("Mostrar");
        btnMostrarPuntos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarPuntosActionPerformed(evt);
            }
        });
        jPanel1.add(btnMostrarPuntos);
        btnMostrarPuntos.setBounds(30, 630, 170, 50);

        txtAreaUltimosTres.setColumns(20);
        txtAreaUltimosTres.setRows(5);
        jScrollPane1.setViewportView(txtAreaUltimosTres);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 150, 370, 150);

        txtResumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResumenActionPerformed(evt);
            }
        });
        jPanel1.add(txtResumen);
        txtResumen.setBounds(30, 780, 370, 40);

        jLabel2.setFont(new java.awt.Font("NSimSun", 0, 14)); // NOI18N
        jLabel2.setText("Total de Prioridades Registradas:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 750, 240, 30);
        jPanel1.add(lblUsuarioActual);
        lblUsuarioActual.setBounds(20, 20, 400, 30);

        jScrollPane3.setViewportView(TextPanelListaPuntos);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(40, 370, 350, 240);

        btnExportartxt.setText("Exportar Lista");
        btnExportartxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportartxtActionPerformed(evt);
            }
        });
        jPanel1.add(btnExportartxt);
        btnExportartxt.setBounds(310, 330, 110, 23);

        btnOrdenarAlfabeticamente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOrdenarAlfabeticamente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOrdenarAlfabeticamenteMouseClicked(evt);
            }
        });
        jPanel1.add(btnOrdenarAlfabeticamente);
        btnOrdenarAlfabeticamente.setBounds(240, 630, 170, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Mostrar nuevo 2.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(6, 6, 420, 881);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverAVentanaPrincipalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverAVentanaPrincipalMouseClicked
       
        this.setVisible(false);
        new VentanaPrincipal(usuarioActual).setVisible(true);
        
    }//GEN-LAST:event_btnVolverAVentanaPrincipalMouseClicked

    private void btnMostrarPuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarPuntosActionPerformed
        
    if (DatosCompartidos.puntosCriticos.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay Puntos Registrados en este Momento", "avisar", JOptionPane.INFORMATION_MESSAGE);
        txtResumen.setText("");
        TextPanelListaPuntos.setText("");
        return;
    }

    TextPanelListaPuntos.setText("");

    int alta = 0;
    int media = 0;
    int baja = 0;

    for (PuntoCritico punto : DatosCompartidos.puntosCriticos) {
        Color color;
        switch (punto.getPrioridad()) {
            case "Alta":
                alta++;
                color = Color.RED;
                break;
            case "Media":
                media++;
                color = new Color(255, 140, 0);
                break;
            case "Baja":
                baja++;
                color = new Color(0, 128, 0);
                break;
            default:
                color = Color.BLACK;
        }
        String textoPunto = "Direccion o Url : " + punto.getDireccion() + "\n"
                          + "Distrito : " + punto.getDistrito() + "\n"
                          + "Prioridad : " + punto.getPrioridad() + "\n"
                          + "Observacion: " + punto.getObservacion() + "\n"
                          + "Fecha de Registro: " + punto.getFechaHora() + "\n"
                          + "===================================== \n";

             colordelTexto(TextPanelListaPuntos, textoPunto, color);
         }

        String resumen = "";
        resumen += "Alta: "+alta+"     ||    Media: "+media+"     ||     Baja: "+baja;
        txtResumen.setText(resumen);
    }//GEN-LAST:event_btnMostrarPuntosActionPerformed

    private void txtResumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResumenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResumenActionPerformed

    private void btnExportartxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportartxtActionPerformed
        
        ExportarPuntosCriticos();
    }//GEN-LAST:event_btnExportartxtActionPerformed

    private void btnOrdenarAlfabeticamenteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrdenarAlfabeticamenteMouseClicked
        
        if (DatosCompartidos.puntosCriticos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay Puntos Registrados en este Momento", "avisar", JOptionPane.INFORMATION_MESSAGE);
            txtResumen.setText("");
            TextPanelListaPuntos.setText("");
            return;
        }
        
        //hacemos una copia de la lista pa no modificar el orden
        ArrayList<PuntoCritico> listaOrdenada = new ArrayList<>(DatosCompartidos.puntosCriticos);
        //
        listaOrdenada.sort(Comparator.comparing(PuntoCritico::getDistrito, String.CASE_INSENSITIVE_ORDER));
        
        //volvemo a usar el metodo para mostrar a color y contar la cantidad de prioridades
        TextPanelListaPuntos.setText("");
        int alta = 0;
        int media = 0;
        int baja = 0;

        for (PuntoCritico punto : listaOrdenada) {
            Color color;
            switch (punto.getPrioridad()) {
                case "Alta":
                    alta++;
                    color = Color.RED;
                    break;
                case "Media":
                    media++;
                    color = new Color(255, 140, 0);
                    break;
                case "Baja":
                    baja++;
                    color = new Color(0, 128, 0);
                    break;
                default:
                    color = Color.BLACK;
            }
            String textoPunto = "Direccion o Url : " + punto.getDireccion() + "\n"
                          + "Distrito : " + punto.getDistrito() + "\n"
                          + "Prioridad : " + punto.getPrioridad() + "\n"
                          + "Observacion: " + punto.getObservacion() + "\n"
                          + "Fecha de Registro: " + punto.getFechaHora() + "\n"
                          + "===================================== \n";

              colordelTexto(TextPanelListaPuntos, textoPunto, color);
           }

        String resumen = "";
        resumen += "Alta: "+alta+"     ||    Media: "+media+"     ||     Baja: "+baja;
        txtResumen.setText(resumen);
    
    }//GEN-LAST:event_btnOrdenarAlfabeticamenteMouseClicked

    private void colordelTexto (JTextPane textPane, String texto, Color color){
        StyledDocument doc = textPane.getStyledDocument();
        Style estilo = textPane.addStyle("estilo", null);
        StyleConstants.setForeground(estilo, color);
        
        try{
            doc.insertString(doc.getLength(), texto, estilo);
        }catch(BadLocationException e){
            e.printStackTrace();
        }
    }
    
    private void ExportarPuntosCriticos(){
        try{
            FileWriter writer = new FileWriter("puntosCriticos.txt");
            for(PuntoCritico punto : DatosCompartidos.puntosCriticos){
                writer.write("Dirección: " + punto.getDireccion() + "\n");
                writer.write("Distrito: " + punto.getDistrito() + "\n");
                writer.write("Prioridad: " + punto.getPrioridad() + "\n");
                writer.write("Observación: " + punto.getObservacion() + "\n");
                writer.write("Fecha y Hora: " + punto.getFechaHora() + "\n");
                writer.write("=====================================\n");
                }
            writer.close();
            JOptionPane.showMessageDialog(this, "Se exportaron correctamente los puntos criticos!");
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, "Error al aexportar la lista de puntos criticos...");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaMostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaMostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaMostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaMostrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new VentanaMostrar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane TextPanelListaPuntos;
    private javax.swing.JButton btnExportartxt;
    private javax.swing.JButton btnMostrarPuntos;
    private javax.swing.JLabel btnOrdenarAlfabeticamente;
    private javax.swing.JLabel btnVolverAVentanaPrincipal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblUsuarioActual;
    private javax.swing.JTextArea txtAreaUltimosTres;
    private javax.swing.JTextField txtResumen;
    // End of variables declaration//GEN-END:variables
}
